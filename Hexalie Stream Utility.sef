[extension_name]
Hexalie Stream Utility
[extension_info]
[extension_version]
0.0.1
[insert_external]

<script>
let hstws;
function hstconnect() {
    hstws = new WebSocket("ws://localhost:8069");
    hstws.onopen = (event) => {
        SAMMI.alert("[HexalieStreamUtility] Connected to Websocket Server");
    }
    hstws.onmessage = (event) => {
        console.log(JSON.parse(event.data));
    }
    hstws.onclose = (event) => {
        SAMMI.alert("Hexalie Stream Util connection closed. Reconnecting in 5 seconds...");
        setTimeout(hstconnect(), 5000);
    }
}
hstconnect();
</script>
[insert_command]
    SAMMI.extCommand('HST - Video', 3355443, 52, {
        src: ['Video File', 22, 'media/'],
        positionX: ['Position X', 14 , "50%"],
        randomX: ['Random X Position', 2, true],
        positionY: ['Position Y', 14 , "50%"],
        randomY: ['Random Y Position', 2, true],
        width: ['Width', 14, "600"],
        height: ['Height', 14, ""],
        volume: ['Volume', 11, 1]
    });
    SAMMI.extCommand('HST - Image', 3355443, 52, {
        src: ['Image File', 22, 'media/'],
        positionX: ['Position X', 14 , "50%"],
        randomX: ['Random X Position', 2, true],
        positionY: ['Position Y', 14 , "50%"],
        randomY: ['Random Y Position', 2, true],
        width: ['Width', 14, "600"],
        height: ['Height', 14, ""],
        duration: ['Duration (seconds)', 14, "5"]
    });
    SAMMI.extCommand('HST - Text', 3355443, 52, {
        text: ['Text', 14, ''],
        positionX: ['Position X', 14 , "50%"],
        randomX: ['Random X Position', 2, true],
        positionY: ['Position Y', 14 , "50%"],
        randomY: ['Random Y Position', 2, true],
        duration: ['Duration (seconds)', 14, "5"],
        css: ['Custom CSS', 0, ""]
    });

[insert_hook]
    case 'HST - Video': {
        hstSend(SAMMIJSON, "video");
    } break
    case 'HST - Image': {
        hstSend(SAMMIJSON, "image");
    } break
    case 'HST - Text': {
        hstSend(SAMMIJSON, "text");
    } break

[insert_script]
    function hstSend(jsonObj, type){
        let message = {
            type: type,
            data: jsonObj
        }
        hstws.send(JSON.stringify(message));
    }
[insert_over]